#!/usr/bin/env bash

set -euo pipefail

help() {
	cat <<-EOF >&2
		Usage: $0 [-h|-p|-m|-M] <path>
	EOF
}

count-commits-since-last-tag() {
	local range
	range="$(git describe --tags --abbrev=0 --match "$1/*" 2>/dev/null)..HEAD"
	git rev-list --count "${range#..}" -- "$1" 2>/dev/null
}

options=$(getopt -n "$0" -o hpmM -l help,patch,minor,major -- "$@")

if test $? -ne 0; then
	exit 1
fi

eval set -- "$options"

while :; do
	case "$1" in
		-p|--patch)
			mode="patch"
			shift
			;;
		-m|--minor)
			mode="minor"
			shift
			;;
		-M|--major)
			mode="major"
			shift
			;;
		-h|--help)
			help
			exit
			;;
		--)
			shift
			break
			;;
	esac
done

if test -z "$*"; then
	echo "$0: missing argument, try --help for more information" >&2
	exit 1
fi

if ! test -d "$1"; then
	echo "$0: '$1' is not a directory" >&2
	exit 1
fi

scripts/validate-lua "$1"
scripts/validate-xml "$1"

platform="$(dirname "$1")"
name="$(basename "$1")"
manifest="$platform/$name/$name.toc"

if ! test -f "$manifest"; then
	echo "$0: '$manifest' is not a file" >&2
	exit 1
fi

old_version="$(grep -Po "Version: \K.+" "$manifest")"

major="$(echo "$old_version" | cut -f1 -d.)"
minor="$(echo "$old_version" | cut -f2 -d.)"
patch="$(echo "$old_version" | cut -f3 -d.)"

case "${mode=patch}" in
	patch)
		count=$(count-commits-since-last-tag "$platform/$name")
		patch=$((patch + count))
		;;
	minor)
		patch=0
		minor=$((minor + 1))
		;;
	major)
		patch=0
		minor=0
		major=$((major + 1))
		;;
esac

new_version="$major.$minor.$patch"

if test "$old_version" = "$new_version"; then
	echo "$0: aborting, versions are identical" >&2
	exit 1
fi

sed -i "s/Version: $old_version/Version: $new_version/" "$manifest"

git commit -m "Bump $platform/$name to $new_version" "$manifest"
git tag -m "Release $name $new_version ($platform)" "$platform/$name/$new_version"
git push --follow-tags
